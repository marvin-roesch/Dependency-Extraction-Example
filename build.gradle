buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    }
}

apply plugin: "net.minecraftforge.gradle.forge"

version = modVersion
group = modGroup
archivesBaseName = modBaseName

minecraft {
    version = project.forgeVersion
    runDir = "run"
    mappings = project.mcpVersion
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

configurations {
    // Configuration that holds JARs to embed inside the mod JAR
    embed
    // Make embedded dependencies actually available during compilation/to IDEs
    compile.extendsFrom embed
}

dependencies {
    // Add as many dependencies here as you like, using 'embed' whenever you want to 'shade' them
    embed 'com.flowpowered:flow-math:1.0.3'
    embed 'de.oceanlabs.mcp:mcinjector:3.7-SNAPSHOT'
}

// Custom task to generate the metadata files required for our dependencies
task generateMetaFiles {
    // Code for execution after the whole buildscript was parsed and loaded
    doLast {
        // Clear the dependencyMeta directory since we don't want old dependencies to still be listed in there
        file("${buildDir}/dependencyMeta/").deleteDir()
        configurations.embed.resolvedConfiguration.resolvedArtifacts.each {
            // Create a meta file for each dependency in a specified directory
            def metaFile = file("${buildDir}/dependencyMeta/${it.file.name}.meta")
            metaFile.parentFile.mkdirs()
            // Use the Gradle notation provided by the API ('group:artifact:version') for the meta file...
            def artifactRef = it.moduleVersion.toString()
            // ...and append the classifier if present
            if (it.classifier != null) {
                artifactRef += ":${it.classifier}"
            }
            def version = it.moduleVersion.id.version
            def output = 'Maven-Artifact: ' + artifactRef
            output += '\nMD5: ' + java.security.MessageDigest.getInstance('MD5').digest(it.file.bytes).encodeHex().toString()
            if (it.moduleVersion.id.version.endsWith('-SNAPSHOT')) {
                //Snapshots are special, there can be many versions of this file and we're suposed to pick the latest one.
                //However, gradle hides any form of metadata related to what specific version we're using.
                //So we guess. By grabbing the latest timestamp from all files in the zip.
                //This CAN be cheesed, but honestly I dont care...
                output += '\nTimestamp: ' + Collections.list(new java.util.zip.ZipFile(it.file).entries()).stream().mapToLong{ze -> ze.time}.reduce{a, b -> a > b ? a : b}.orElse(0)
            }
            //println artifactRef
            //println output
            
            // Write the artifact information to the meta file, to be used by the
            metaFile.text = output
        }
    }
}

// Use the standard JAR task as container for the main jar and the contained dependencies (from the embed configuration)
jar {
    into('/META-INF/dependencies') {
        // Add all of the dependency JARs to the main JAR for later extraction
        from configurations.embed
        // Also include all dependency meta files
        from "${buildDir}/dependencyMeta/"
    }
    manifest {
        // The crucial manifest attribute: Make Forge extract the contained JARs
        attributes 'ContainedDeps': configurations.embed.collect { it.name }.join(' ')
    }
    // Only run the main jar task after the meta files were built
    dependsOn generateMetaFiles
}
